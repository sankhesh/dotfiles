snippet qtheader
/*=========================================================================
 * @file ${1:`!p snip.rv = snip.basename`}.h
 *
 * @brief $2
========================================================================*/

#pragma once

// Qt includes
#include <$3>

// Forward declarations

namespace $4
{

/**
 * \class $1
 * \brief $2 $0
 */
class $1 : public $3
{
  Q_OBJECT
  typedef $3 Superclass;

public:
  $1($3 * parent = nullptr);
  ~$1();

private:
  Q_DISABLE_COPY($1)
};

} // end namespace $4
endsnippet

snippet qtimpl
/*=========================================================================
 * @file ${1:`!p snip.rv = snip.basename`}.cxx
 *
 * @brief $2
========================================================================*/

// $3 includes
#include "$1.h"

// Qt includes

namespace $5
{
//-------------------------------------------------------------------------------------------------
$1::$1($4 * parent) :
  Superclass(parent)
{
$0
}

//-------------------------------------------------------------------------------------------------
$1::~$1()
{
}

} // end namespace $5
endsnippet

snippet vtktest
// SPDX-FileCopyrightText: Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
// SPDX-License-Identifier: BSD-3-Clause

/**Description
 * $2
 */

#include "vtkTestUtilities.h"
#include "vtkTesting.h"

int ${1:`!p snip.rv = snip.basename`}(int argc, char *argv[])
{
  cout << "CTEST_FULL_OUTPUT (Avoid ctest truncation of output)" << endl;
  $0
}
endsnippet

snippet vtkinit
vtkNew<vtkRenderWindow> renWin;
renWin->SetMultiSamples(0);
renWin->SetSize(301, 300); // Intentional NPOT size

vtkNew<vtkRenderer> ren;
renWin->AddRenderer(ren);

vtkNew<vtkRenderWindowInteractor> iren;
iren->SetRenderWindow(renWin);

renWin->Render();
endsnippet

snippet vtkcopyright
// SPDX-FileCopyrightText: Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
// SPDX-License-Identifier: BSD-3-Clause
endsnippet

snippet vtkheader
/*=============================================================================
Copyright and License information
=============================================================================*/
/**
 * @class ${1:`!p snip.rv = snip.basename`}
 * @brief $0
 *
 */

#ifndef ${1:`!p snip.rv = snip.basename`}_h
#define $1_h

// VTK includes
#include <$2.h>

VTK_ABI_NAMESPACE_BEGIN
// Forward declarations

class $1 : public $2
{
public:
  /**
   * Instantiate the class.
   */
  static $1* New();

  ///@{
  /**
   * Standard methods for the VTK class.
   */
  vtkTypeMacro($1, $2);
  void PrintSelf(ostream &os, vtkIndent indent) override;
  ///@}

protected:
  $1();
  ~$1();

  // Helper members

private:
  $1(const $1&) = delete;
  void operator=(const $1) = delete;
};

VTK_ABI_NAMESPACE_END
#endif //$1_h
endsnippet

snippet vtkimpl
/*=============================================================================
Copyright and License information
=============================================================================*/

// $2 includes
#include "${1:`!p snip.rv = snip.basename`}.h"

// VTK includes
#include "vtkObjectFactory.h"

VTK_ABI_NAMESPACE_BEGIN
//-------------------------------------------------------------------------------------------------
vtkStandardNewMacro($1);

//-------------------------------------------------------------------------------------------------
$1::$1()
{
$0
}

//-------------------------------------------------------------------------------------------------
$1::~$1()
{
}

//-------------------------------------------------------------------------------------------------
void $1::PrintSelf(ostream &os, vtkIndent indent)
{
  this->Superclass::PrintSelf(os, indent);
  os << indent << " = " << this-> << endl;
}

//-------------------------------------------------------------------------------------------------
VTK_ABI_NAMESPACE_END
endsnippet

snippet vtkincludes
#include <vtkActor.h>
#include <vtkCamera.h>
#include <vtkNew.h>
#include <vtkRenderWindow.h>
#include <vtkRenderWindowInteractor.h>
#include <vtkRenderer.h>
endsnippet

snippet vtkvolumeincludes
#include <vtkColorTransferFunction.h>
#include <vtkGPUVolumeRayCastMapper.h>
#include <vtkPiecewiseFunction.h>
#include <vtkVolume.h>
#include <vtkVolumeProperty.h>
endsnippet

snippet vtkvolumeinit
  vtkNew<vtkColorTransferFunction> ctf;
  vtkNew<vtkPiecewiseFunction> pf;
  vtkNew<vtkVolumeProperty> volumeProperty;
  vtkNew<vtkVolume> volume;
  vtkNew<vtkGPUVolumeRayCastMapper> mapper;

  volumeProperty->SetColor(ctf);
  volumeProperty->SetScalarOpacity(pf);
  volume->SetProperty(volumeProperty);
  volume->SetMapper(mapper);
endsnippet

snippet customheader
/*=========================================================================
 * @file ${1:`!p snip.rv = snip.fn`}
 *
 * @brief $2
========================================================================*/
$0
endsnippet
